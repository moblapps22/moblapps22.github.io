{"version":3,"sources":["webpack:///./src/pages/ProjectsText.js"],"names":["ProjectsText","render","id","className","React","Component"],"mappings":"8JAKMA,E,gLAEJC,OAAA,WACE,OACE,6BAASC,GAAG,WAAWC,UAAU,gBAC/B,4BAAQA,UAAU,SAChB,gEACA,2tBAKE,6BALF,yJAUF,uBAAGA,UAAU,YAIb,4BAAQA,UAAU,SAChB,qDACA,omBAGA,6BAHA,qG,GAvBiBC,IAAMC,WAsClBL","file":"component---src-pages-projects-text-js-c1e789d67bda0c37f614.js","sourcesContent":["import React from 'react'\r\nimport '../../node_modules/bootstrap/dist/css/bootstrap.min.css';\r\nimport header from '../assets/css/header.css';\r\nimport '../assets/css/responsive.css';\r\n\r\nclass ProjectsText extends React.Component {\r\n\r\n  render() {\r\n    return (\r\n      <section id=\"projects\" className=\"main special\">\r\n        <header className=\"major\">\r\n          <h2>SEAMLESS WEBSITE CLOUD MIGRATION</h2>\r\n          <p>\r\n          My client needed to move a website receiving over 2.5 million requests using 250 GB of bandwidth per day into their AWS account within 8 weeks. The Linux, PHP & other libraries in use were several versions behind. Some code had up to 15 years of revisions to update and move to a new version control system.\r\n\r\n    Even with limited time, I built a redundant, secure architecture leveraging multiple availability zones & separate VPCs. I upgraded and tested all major software versions and implemented a new deployment system with separate production, staging & development environments. Creative DNS + load balancing allowed us to complete a zero-downtime migration during transfer of domain name ownership.\r\n\r\n            <br />\r\n            The Results: The new site can handle more traffic at a lower cost with fault-tolerance and fully documented configuration management and monitoring.\r\n          </p>\r\n        </header>\r\n\r\n        <p className=\"content\">\r\n\r\n        </p>\r\n\r\n        <header className=\"major\">\r\n          <h2>SERVERLESS AUTOMATION</h2>\r\n          <p>\r\n            I was engaged to move a customer API from another cloud provider into Amazon Web Services. The client was a small startup with no full-time devops engineers. The main requirement was to lower response time to under 200ms.\r\n            I implemented Lambda + API Gateway + a custom deployment script to avoid setting up systems their team would have to monitor, moving their focus away from customer satisfaction. Because of some service limitations, I deployed a custom proxy solution requiring very little maintenance for the lowest possible latency utilizing the AWS Region closest to the user\r\n          <br/>\r\n            The Results: A faster site with fewer systems and easy global deployment any engineer can use.\r\n          </p>\r\n        </header>\r\n\r\n\r\n\r\n      </section>\r\n    )\r\n  }\r\n}\r\n\r\nexport default ProjectsText\r\n"],"sourceRoot":""}